# The default state
DEFAULT

# Whitespace states
MAC_NEW_LINE                           #Includes \r, \r\n
WHITESPACE
HTML_COMMENT                           #If <!-- is read successfully, scan an HTML comment to the end of line.
HTML_COMMENT.DASH1                     #The first dash in <!--
HTML_COMMENT.DASH2                     #The second dash in <!--
HTML_COMMENT.EXCLAMATION               #The ! in <!--

# Arithmetic operators
PLUS                                   #Includes +, +=, ++
MINUS                                  #Includes -, -+, -- and --> but only at the start of line
MULTIPLY                               #Includes *, *=
DIVIDE                                 #Includes /, /=, //, /*
REMINDER                               #Includes %, %=

# Bitwise and logical operators
BITWISE_AND                            #Includes &, &=, &&
BITWISE_OR                             #Includes |, |=, ||
BITWISE_XOR                            #Includes ^, ^=
LOGICAL_NOT                            #Includes !, !=

# Shift operators
SHIFT_LEFT
SHIFT_RIGHT

# Other operators
DOT                                    #Includes "member operator" and "number"

# Comparison operators
LESS_THAN                              #Includes <, <=, <<, <<=, <!--
GREATER_THAN                           #Includes >, >=, >>, >>=, >>>, >>>=
EQUAL                                  #Includes =, ==, ===
EQUAL.DOUBLE                           #Includes ==, ===
EQUAL.TRIPLE                           #Includes ===
NUMBER                                 #Scans for number
IDENTIFIER                             #Scans for identifier or keyword (subset of identifier).
IDENTIFIER.ESCAPE_SEQUENCE             #Called when \ is read in default state (not STRING state).
                                       # Javascript permit only unicode escape sequences to escape identifiers in code
                                       # (essentially allowing the file to be encoded in ASCII,
                                       # while actual code be compiled as unicode).

# String scanning
STRING                                 #Scans for string
STRING.OPEN                            #Switched from other state detecting string open character.
                                       # String should memorize that character to base escape sequences on those.
ESCAPE_SEQUENCE                        #Called on \ character discovered on a string.
ESCAPE_SEQUENCE.UNICODE                #Special sequence that allow only \uXXXX or \u{XXXX}
ESCAPE_SEQUENCE.HEX1                   #After \x sequence at first hex character
ESCAPE_SEQUENCE.HEX2                   #After \x sequence at second hex character
ESCAPE_SEQUENCE.UNICODE_OPEN           #After \u sequence at { or first digit (redirect to UNI1 in latter case).
ESCAPE_SEQUENCE.UNICODE_SCAN           #Scanning for hex digit and and re-evaluate the code. If the code > 1114111, stop and throw error.
ESCAPE_SEQUENCE.UNI1                   #After \u sequence at first hex character
ESCAPE_SEQUENCE.UNI2                   #After \u sequence at second hex character
ESCAPE_SEQUENCE.UNI3                   #After \u sequence at third hex character
ESCAPE_SEQUENCE.UNI4                   #After \u sequence at forth hex character
ESCAPE_SEQUENCE.OCT1                   #After \0 sequence at first oct character
                                       #(if it turns out not be oct character, set null character e.g. \0).
ESCAPE_SEQUENCE.OCT2                   #After \0 sequence at second oct character (0 is part of the type).